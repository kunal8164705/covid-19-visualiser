{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","isgrey","isgreen","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","multiplier","option","fillColor","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","radius","Math","sqrt","Popup","style","backgroundImage","flag","ChangeMap","zoom","useMap","setView","Map","countries","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","graph_color","useState","setData","Flag","setFlag","useEffect","fetch","then","response","json","timeline","fetchData","length","datasets","backgroundColor","borderColor","Style","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd2b852c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed,isgrey,isgreen, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      } ${isgrey&&\"infoBox--grey\"} `\r\n      \r\n    }\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${isgrey&&\"infoBox__cases--grey\"}  ${isgreen&&\"infoBox__cases--green\"} `}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    multiplier: 800,\r\n    option: { color:\"#cc1034\", fillColor: \"#cc1034\" },\r\n  },\r\n  recovered: {\r\n    multiplier: 1200,\r\n    option: { color:\"#7dd71d\", fillColor: \"#7dd71d\" },\r\n  },\r\n  deaths: {\r\n    multiplier: 2000,\r\n    option: { color:\"#555e55\", fillColor: \"#555e55\" }\r\n  },\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const sortData=(data)=>{\r\nconst sortedData=[...data];\r\n\r\n  return sortedData.sort((a,b)=> a.cases>b.cases?-1:1);\r\n};\r\n\r\n\r\n\r\n\r\nexport const showDataOnMap = (data, casesType ) =>\r\n\r\ndata.map((country) => (\r\n   \r\n    <Circle\r\n    center={[country.countryInfo.lat, country.countryInfo.long]}\r\n    fillOpacity={0.4}\r\n    pathOptions={casesTypeColors[casesType].option}\r\n    radius={\r\n      Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier*0.4\r\n    }\r\n    >\r\n      \r\n      <Popup>\r\n       \r\n      <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from 'react';\r\n\r\nimport { MapContainer as LeafletMap, TileLayer ,useMap} from \"react-leaflet\";\r\nimport \"./Map.css\";\r\n\r\nimport{showDataOnMap} from \"./util\";\r\n\r\n\r\nfunction ChangeMap({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n\r\nfunction Map({countries,center,zoom,casesType}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap>\r\n            <ChangeMap center={center} zoom={zoom}/>\r\n                <TileLayer \r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                        {/* loop through and draw circles on map */}\r\n                        {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\n\r\nimport './Table.css';\r\n\r\n\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                countries.map(({country,cases})=>(\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td>\r\n                            <strong>{cases}</strong>\r\n                            </td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: true,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n\r\n\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, country }) {\r\n  const [data, setData] = useState({});\r\n  const [Flag, setFlag] = useState(false);\r\n\r\n  if (!country) {\r\n    country = \"all\";\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(`https://disease.sh/v3/covid-19/historical/${country}?lastdays=60`)\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          if (data.country || data.cases) {\r\n            if (country !== \"all\") { data = data.timeline; }\r\n            let chartData = buildChartData(data, casesType);\r\n            setData(chartData);\r\n          }\r\n          else {\r\n            setFlag(true);\r\n            setData({});\r\n          }\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType, country]);\r\n\r\n\r\n  var graph_color;\r\n  if (casesType === 'cases') {\r\n    graph_color = \"#CC1034\";\r\n  }\r\n  else if (casesType === 'recovered') {\r\n    graph_color = \"#90ee90\";\r\n  }\r\n  else {\r\n    graph_color = \"#555e55\";\r\n  }\r\n\r\n  console.log(\"check flag\", Flag);\r\n\r\n  return (\r\n    <div>\r\n\r\n      {\r\n\r\n\r\n        data.length > 0 ? (\r\n          <Line\r\n            data={{\r\n              datasets: [\r\n                {\r\n                  backgroundColor: \"rgba(255, 255, 255, 0.5)\",\r\n                  borderColor: `${graph_color}`,\r\n                  data: data,\r\n                },\r\n              ],\r\n            }}\r\n            options={options}\r\n          />\r\n        ) : <div Style=\"margin:4rem;\">Recents updates unavailable.</div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  CardContent,\n  Card,\n} from \"@material-ui/core\";\n\nimport InfoBox from \"./InfoBox\";\n\nimport Map from \"./Map\";\n\nimport Table from \"./Table\";\n\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from './LineGraph';\n\nimport \"leaflet/dist/leaflet.css\";\n\nimport numeral from 'numeral';\n\n\n\n\n\n\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n\n\n\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n\n  }, []);\n\n\n\n\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,  //country name like United States\n              value: country.countryInfo.iso2 //US\n\n            }\n          ));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = countryCode === \"worldwide\"\n      ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n\n\n    await fetch(url).then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n\n      });\n  };\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"app__left\">\n\n\n        <div className=\"app__header\">\n          <h1>COVID-19 VISUALISER </h1>\n\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n\n\n              {/* Loop through all the countries and show a dropdown list of \n   all the options */}\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                )\n                )\n              }\n\n\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n\n          <InfoBox title=\"Coronavirus cases\"\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.active)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")} />\n\n          <InfoBox title=\"Recovered\"\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            isgreen\n            active={casesType === \"recovered\"}\n\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")} />\n\n          <InfoBox title=\"Deaths\"\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n\n            isgrey\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")} />\n\n\n        </div>\n\n\n\n        {/* Map */}\n        <Map countries={mapCountries} casesType={casesType} center={mapCenter} zoom={mapZoom} />\n\n\n\n      </div>\n\n      <Card className=\"app__right\">\n\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live cases by country</h3>\n\n            <Table countries={tableData} />\n\n\n\n\n            <h3>{(countryInfo.country) ? countryInfo.country : \"Worldwide\"} new {casesType} <small>(last 60 days)</small></h3>\n\n\n            <LineGraph casesType={casesType} country={countryInfo.country} />\n          </div>\n        </CardContent>\n\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}